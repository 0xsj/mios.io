// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const clearResetToken = `-- name: ClearResetToken :exec
UPDATE auth
SET
    reset_token = NULL,
    reset_token_expires_at = NULL,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

func (q *Queries) ClearResetToken(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, clearResetToken, userID)
	return err
}

const clearVerificationToken = `-- name: ClearVerificationToken :exec
UPDATE auth
SET verification_token = NULL
WHERE user_id = $1
`

func (q *Queries) ClearVerificationToken(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, clearVerificationToken, userID)
	return err
}

const createAuth = `-- name: CreateAuth :exec
INSERT INTO auth (
    user_id, password_hash, salt, is_email_verified, verification_token, reset_token, reset_token_expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
`

type CreateAuthParams struct {
	UserID              uuid.UUID  `json:"user_id"`
	PasswordHash        string     `json:"password_hash"`
	Salt                string     `json:"salt"`
	IsEmailVerified     *bool      `json:"is_email_verified"`
	VerificationToken   *string    `json:"verification_token"`
	ResetToken          *string    `json:"reset_token"`
	ResetTokenExpiresAt *time.Time `json:"reset_token_expires_at"`
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) error {
	_, err := q.db.Exec(ctx, createAuth,
		arg.UserID,
		arg.PasswordHash,
		arg.Salt,
		arg.IsEmailVerified,
		arg.VerificationToken,
		arg.ResetToken,
		arg.ResetTokenExpiresAt,
	)
	return err
}

const getAuthByUserID = `-- name: GetAuthByUserID :one
SELECT auth_id, user_id, password_hash, salt, is_email_verified, verification_token, reset_token, reset_token_expires_at, last_login, refresh_token, failed_login_attempts, locked_until, created_at, updated_at FROM auth
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetAuthByUserID(ctx context.Context, userID uuid.UUID) (*Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByUserID, userID)
	var i Auth
	err := row.Scan(
		&i.AuthID,
		&i.UserID,
		&i.PasswordHash,
		&i.Salt,
		&i.IsEmailVerified,
		&i.VerificationToken,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLogin,
		&i.RefreshToken,
		&i.FailedLoginAttempts,
		&i.LockedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAuthByVerificationToken = `-- name: GetAuthByVerificationToken :one
SELECT auth_id, user_id, password_hash, salt, is_email_verified, verification_token, reset_token, reset_token_expires_at, last_login, refresh_token, failed_login_attempts, locked_until, created_at, updated_at FROM auth
WHERE verification_token = $1
LIMIT 1
`

func (q *Queries) GetAuthByVerificationToken(ctx context.Context, verificationToken *string) (*Auth, error) {
	row := q.db.QueryRow(ctx, getAuthByVerificationToken, verificationToken)
	var i Auth
	err := row.Scan(
		&i.AuthID,
		&i.UserID,
		&i.PasswordHash,
		&i.Salt,
		&i.IsEmailVerified,
		&i.VerificationToken,
		&i.ResetToken,
		&i.ResetTokenExpiresAt,
		&i.LastLogin,
		&i.RefreshToken,
		&i.FailedLoginAttempts,
		&i.LockedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const incrementFailedLoginAttempts = `-- name: IncrementFailedLoginAttempts :exec
UPDATE auth
SET
    failed_login_attempts = failed_login_attempts + 1,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

func (q *Queries) IncrementFailedLoginAttempts(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementFailedLoginAttempts, userID)
	return err
}

const invalidateRefreshToken = `-- name: InvalidateRefreshToken :exec
UPDATE auth
SET
    refresh_token = NULL,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

func (q *Queries) InvalidateRefreshToken(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, invalidateRefreshToken, userID)
	return err
}

const setAccountLockout = `-- name: SetAccountLockout :exec
UPDATE auth
SET
    locked_until = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type SetAccountLockoutParams struct {
	UserID      uuid.UUID  `json:"user_id"`
	LockedUntil *time.Time `json:"locked_until"`
}

func (q *Queries) SetAccountLockout(ctx context.Context, arg SetAccountLockoutParams) error {
	_, err := q.db.Exec(ctx, setAccountLockout, arg.UserID, arg.LockedUntil)
	return err
}

const setResetToken = `-- name: SetResetToken :exec
UPDATE auth
SET
    reset_token = $2,
    reset_token_expires_at = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type SetResetTokenParams struct {
	UserID              uuid.UUID  `json:"user_id"`
	ResetToken          *string    `json:"reset_token"`
	ResetTokenExpiresAt *time.Time `json:"reset_token_expires_at"`
}

func (q *Queries) SetResetToken(ctx context.Context, arg SetResetTokenParams) error {
	_, err := q.db.Exec(ctx, setResetToken, arg.UserID, arg.ResetToken, arg.ResetTokenExpiresAt)
	return err
}

const storeRefreshToken = `-- name: StoreRefreshToken :exec
UPDATE auth
SET
    refresh_token = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type StoreRefreshTokenParams struct {
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken *string   `json:"refresh_token"`
}

func (q *Queries) StoreRefreshToken(ctx context.Context, arg StoreRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, storeRefreshToken, arg.UserID, arg.RefreshToken)
	return err
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE auth
SET
    last_login = CURRENT_TIMESTAMP,
    failed_login_attempts = 0,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateLastLogin, userID)
	return err
}

const updatePasswordHash = `-- name: UpdatePasswordHash :exec
UPDATE auth
SET
    password_hash = $2,
    salt = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

type UpdatePasswordHashParams struct {
	UserID       uuid.UUID `json:"user_id"`
	PasswordHash string    `json:"password_hash"`
	Salt         string    `json:"salt"`
}

func (q *Queries) UpdatePasswordHash(ctx context.Context, arg UpdatePasswordHashParams) error {
	_, err := q.db.Exec(ctx, updatePasswordHash, arg.UserID, arg.PasswordHash, arg.Salt)
	return err
}

const verifyEmail = `-- name: VerifyEmail :exec
UPDATE auth
SET
    is_email_verified = true,
    verification_token = NULL,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = $1
`

func (q *Queries) VerifyEmail(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, verifyEmail, userID)
	return err
}
